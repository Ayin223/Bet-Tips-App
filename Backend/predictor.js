import { combinedFixtures } from "./app.js";


const W_RATE = 0.45;    
const W_STANDING = 0.30;
const W_GF = 0.15;
const W_GA = 0.10;
const DRAW_THRESHOLD = 0.10;
const MAX_STANDING = 20;


const safeNum = (value) => Number(value) || 0;


let totalTips = 0;

const analysis = () => {
  const validTips = combinedFixtures
    .map(match => {
      const {
        completed: matchStatus,
        matchDate,
        matchTime,
        matchID,
        league,
        home: {
          name: homeTeam,
          standing: homeStanding,
          gamesPlayed: homeGamesPlayed,
          homeOdds,
          avgGoalsFor: avgHomeGoalsScored,
          avgGoalsAgainst: avgHomeGoalsConceded,
          winRate: homeWinRate,
          points: homePoints,
        },
        away: {
          name: awayTeam,
          standing: awayStanding,
          gamesPlayed: awayGamesPlayed,
          awayOdds,
          avgGoalsFor: avgAwayGoalsScored,
          avgGoalsAgainst: avgAwayGoalsConceded,
          winRate: awayWinRate,
          points: awayPoints,
        },
        drawOdds,
      } = match;

      const numHomeStanding = safeNum(homeStanding);
      const numAwayStanding = safeNum(awayStanding);
      const numHomeWinRate = safeNum(homeWinRate) / 100; // Normalize 0-1
      const numAwayWinRate = safeNum(awayWinRate) / 100; // Normalize 0-1
      const numHomeGoalsScored = safeNum(avgHomeGoalsScored);
      const numAwayGoalsScored = safeNum(avgAwayGoalsScored);
      const numHomeGoalsConceded = safeNum(avgHomeGoalsConceded);
      const numAwayGoalsConceded = safeNum(avgAwayGoalsConceded);

      const exclusionFactors =
        safeNum(homeOdds) < 1.80 ||
        safeNum(awayOdds) < 1.80 ||
        safeNum(homeGamesPlayed) < 1 ||
        safeNum(awayGamesPlayed) < 1 ||
        Math.abs(safeNum(homePoints) - safeNum(awayPoints)) < 12;

      if (!matchStatus) {
        if (exclusionFactors) {
          console.log(`â›” Skipped: ${homeTeam} vs ${awayTeam} | homeOdds=${homeOdds}, awayOdds=${awayOdds}, pdiff= ${homePoints - awayPoints}`);
          return null;
        }

        totalTips++;

        const normalizedHomeStanding = Math.max(0, MAX_STANDING - numHomeStanding) / MAX_STANDING;
        const normalizedAwayStanding = Math.max(0, MAX_STANDING - numAwayStanding) / MAX_STANDING;

        // Calculate Score: S = (W_RATE*WinRate) + (W_STANDING*NormStanding) + (W_GF*GF) - (W_GA*GA)
        // Note: GF/GA metrics are used directly as modifiers.
        const scoreHome =
            (W_RATE * numHomeWinRate) +
            (W_STANDING * normalizedHomeStanding) +
            (W_GF * numHomeGoalsScored) -
            (W_GA * numHomeGoalsConceded);

        const scoreAway =
            (W_RATE * numAwayWinRate) +
            (W_STANDING * normalizedAwayStanding) +
            (W_GF * numAwayGoalsScored) -
            (W_GA * numAwayGoalsConceded);

        const scoreDiff = scoreHome - scoreAway;

        let prediction;
        let predictedOdds;

        if (Math.abs(scoreDiff) < DRAW_THRESHOLD) {
          prediction = 'Draw';
          predictedOdds = safeNum(drawOdds) || 3.00;
        } else if (scoreDiff > 0) {
          prediction = `${homeTeam} wins`;
          predictedOdds = safeNum(homeOdds);
        } else {
          prediction = `${awayTeam} wins`;
          predictedOdds = safeNum(awayOdds);
        }

        const isPremiumTip = Math.abs(scoreDiff) > (DRAW_THRESHOLD * 2);

        let confidence = 0.50 + Math.min(0.35, Math.abs(scoreDiff * 0.5)); 
        if (isPremiumTip) {
            confidence += 0.05;
        }
        confidence = Math.min(0.90, confidence);

        return {
          league,
          matchDate,
          matchTime,
          matchID,
          homeTeam,
          awayTeam,
          status: matchStatus,
          prediction,
          odds: predictedOdds,
          homeOdds,
          awayOdds,
          drawOdds,
          confidence: parseFloat(confidence.toFixed(2)),
          isPremium: isPremiumTip,
          outcome: "PENDING",
          homeScore: null,
          awayScore: null,
          
          predictionScore: parseFloat(scoreDiff.toFixed(3)),
          homePoints,
          HomeStanding: numHomeStanding, HomeGamesPlayed: safeNum(homeGamesPlayed),
          awayPoints,
          AwayStanding: numAwayStanding, AwayGamesPlayed: safeNum(awayGamesPlayed),
          avgHomeGoalsScored, avgHomeGoalsConceded, homeWinRate,
          avgAwayGoalsScored, avgAwayGoalsConceded, awayWinRate,
        };
      } else {
          return match;
      }
    })
    .filter(Boolean);

  console.log(`Total tips generated by new model: ${totalTips}`);
  return validTips;
};

export const betTips = await analysis();

// betTips.forEach(e => 
//   console.log(e)
// )

// const filteredTips = betTips.filter(
//   (tip) => tip.confidence >= 0.60 && tip.confidence <= 0.69
// );

// filteredTips.forEach((tip) => {
//   console.log(`
//   ${tip.homeTeam} vs ${tip.awayTeam}
//   Prediction: ${tip.prediction} @ ${tip.matchDate}
//   Confidence: ${(tip.confidence * 100).toFixed(1)}%  - ${tip.predictedOdds}
//   `);
// });

